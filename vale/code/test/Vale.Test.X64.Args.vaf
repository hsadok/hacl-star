include "../arch/x64/Vale.X64.InsBasic.vaf"
include "../arch/x64/Vale.X64.InsMem.vaf"
include "../arch/x64/Vale.X64.InsVector.vaf"

module Vale.Test.X64.Args
#verbatim{:interface}{:implementation}

open Vale.X64.Machine_s
open Vale.X64.Memory
open Vale.X64.Stack_i
open Vale.X64.State
open Vale.X64.Decls
open Vale.X64.InsBasic
open Vale.X64.InsMem
open Vale.X64.InsVector
open Vale.X64.QuickCode
open Vale.X64.QuickCodes
#set-options "--z3rlimit 20"
#endverbatim

procedure Test(inline win:bool,
        ghost arg0:buffer64,
        ghost arg1:buffer64,
        ghost arg2:buffer64,
        ghost arg3:buffer64,
        ghost arg4:buffer64,
        ghost arg5:buffer64,
        ghost arg6:buffer64,
        ghost arg7:buffer64)
    {:public}
    {:quick}
    {:exportSpecs}
    requires
        rsp == init_rsp(stack);
        win ==> valid_src_stack64(rsp + 32 + 8 + 0, stack);
        win ==> valid_src_stack64(rsp + 32 + 8 + 8, stack);
        win ==> valid_src_stack64(rsp + 32 + 8 + 16, stack);
        win ==> valid_src_stack64(rsp + 32 + 8 + 24, stack);
        !win ==> valid_src_stack64(rsp + 8 + 0, stack);
        !win ==> valid_src_stack64(rsp + 8 + 8, stack);

        buffer_readable(mem, arg0);
        buffer_readable(mem, arg1);
        buffer_readable(mem, arg2);
        buffer_readable(mem, arg3);
        buffer_readable(mem, arg4);
        buffer_readable(mem, arg5);
        buffer_readable(mem, arg6);
        buffer_readable(mem, arg7);
        win ==> rcx == buffer_addr(arg0, mem);
        win ==> rdx == buffer_addr(arg1, mem);
        win ==> r8 == buffer_addr(arg2, mem);
        win ==> r9 == buffer_addr(arg3, mem);
        win ==> load_stack64(rsp + 32 + 8 + 0, stack) == buffer_addr(arg4, mem);
        win ==> load_stack64(rsp + 32 + 8 + 8, stack) == buffer_addr(arg5, mem);
        win ==> load_stack64(rsp + 32 + 8 + 16, stack) == buffer_addr(arg6, mem);
        win ==> load_stack64(rsp + 32 + 8 + 24, stack) == buffer_addr(arg7, mem);
        !win ==> rdi == buffer_addr(arg0, mem);
        !win ==> rsi == buffer_addr(arg1, mem);
        !win ==> rdx == buffer_addr(arg2, mem);
        !win ==> rcx == buffer_addr(arg3, mem);
        !win ==> r8 == buffer_addr(arg4, mem);
        !win ==> r9 == buffer_addr(arg5, mem);
        !win ==> load_stack64(rsp + 8 + 0, stack) == buffer_addr(arg6, mem);
        !win ==> load_stack64(rsp + 8 + 8, stack) == buffer_addr(arg7, mem);
    ensures
        rsp == old(rsp);

        win ==>  rbx == old(rbx);
        win ==>  rbp == old(rbp);
        win ==>  rdi == old(rdi);
        win ==>  rsi == old(rsi);
        win ==>  r12 == old(r12);
        win ==>  r13 == old(r13);
        win ==>  r14 == old(r14);
        win ==>  r15 == old(r15);
        !win ==>  rbx == old(rbx);
        !win ==>  rbp == old(rbp);
        !win ==>  r12 == old(r12);
        !win ==>  r13 == old(r13);
        !win ==>  r14 == old(r14);
        !win ==>  r15 == old(r15);
        win ==>  xmm6 == old(xmm6);
        win ==>  xmm7 == old(xmm7);
        win ==>  xmm8 == old(xmm8);
        win ==>  xmm9 == old(xmm9);
        win ==>  xmm10 == old(xmm10);
        win ==>  xmm11 == old(xmm11);
        win ==>  xmm12 == old(xmm12);
        win ==>  xmm13 == old(xmm13);
        win ==>  xmm14 == old(xmm14);
        win ==>  xmm15 == old(xmm15);

        modifies_none(old(mem), mem);
    reads
    modifies
        rax; rbx; rcx; rdx; rsi; rdi; rbp; rsp; r8; r9; r10; r11; r12; r13; r14; r15;
        xmm0; xmm1; xmm2; xmm3; xmm4; xmm5; xmm6; xmm7; xmm8; xmm9; xmm10; xmm11; xmm12; xmm13; xmm14; xmm15;
        efl; mem;
{
        Mov64(rax, rbx);
}
