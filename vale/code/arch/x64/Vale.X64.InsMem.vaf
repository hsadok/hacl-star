include "Vale.X64.InsBasic.vaf"
include{:fstar}{:open} "Vale.Def.Types_s"
include{:fstar}{:open} "Vale.Arch.Types"
include{:fstar}{:open} "Vale.X64.Machine_s"
include{:fstar}{:open} "Vale.X64.Memory"
include{:fstar}{:open} "Vale.X64.Stack_i"
include{:fstar}{:open} "Vale.X64.Memory_Sems"
include{:fstar}{:open} "Vale.X64.Stack_Sems"
include{:fstar}{:open} "Vale.X64.State"
include{:fstar}{:open} "Vale.X64.Decls"
include{:fstar}{:open} "Vale.X64.QuickCode"
include{:fstar}{:open} "Vale.X64.CPU_Features_s"

module Vale.X64.InsMem

#verbatim{:interface}
open Vale.Def.Types_s
open Vale.X64.Machine_s
open Vale.X64.Memory
open Vale.X64.Stack_i
open Vale.X64.State
open Vale.X64.Decls
open Vale.X64.QuickCode
open Vale.X64.InsBasic
open Vale.X64.CPU_Features_s
#endverbatim

#verbatim
open Vale.X64
open Vale.X64.StateLemmas
open Vale.X64.InsLemmas
module I = Vale.X64.Instructions_s
module S = Vale.X64.Machine_Semantics_s
module P = Vale.X64.Print_s
open Vale.X64.Taint_Semantics

friend Vale.X64.Decls
#endverbatim

//function operator([]) #[a:Type(0), b:Type(0)](m:FStar.Map.t(a, b), key:a):b extern;
//function operator([]) (m:mem, b:Vale.X64.Memory.buffer64):fun(int) -> nat64 extern;

#reset-options "--initial_fuel 2 --max_fuel 2 --max_ifuel 2 --z3rlimit 20"

procedure Mem_in(in base:reg64, inline offset:int, ghost b:buffer64, ghost index:int, inline t:taint)
    returns(o:opr)
    {:operand}
    reads
        mem;
    extern;

procedure Load64_buffer(
        out dst:dst_opr64, in src:reg_opr64, inline offset:int, inline t:taint,
        ghost b:buffer64, ghost index:int)
    {:public}
    {:quick exportOnly}
    {:instruction mk_ins(make_instr(I.ins_Mov64, dst, OMem(tuple(MReg(get_reg(src), offset), t))))}
    reads
        mem; memTaint;
    requires
        valid_src_addr(mem, b, index);
        valid_taint_buf64(b, mem, memTaint, t);
        src + offset == buffer_addr(b, mem) + 8 * index;
    ensures
        dst == buffer64_read(b, index, mem);
{
}

procedure Store64_buffer(
        in dst:reg_opr64, in src:reg_opr64, inline offset:int, inline t:taint,
        ghost b:buffer64, ghost index:int)
    {:public}
    {:quick exportOnly}
    {:instruction mk_ins(make_instr(I.ins_Mov64, OMem(tuple(MReg(get_reg(dst), offset), t)), src))}
    reads memTaint;
    modifies
        mem;
    requires
        valid_dst_addr(mem, b, index);
        valid_taint_buf64(b, mem, memTaint, t);
        dst + offset == buffer_addr(b, mem) + 8 * index;
    ensures
        modifies_mem(loc_buffer(b), old(mem), mem);
        mem == old(buffer64_write(b, index, src, mem));
        valid_taint_buf64(b, mem, memTaint, t);
{
    low_lemma_store_mem64(b, #nat(index), old(src), old(mem));
    lemma_valid_taint64(b, old(#memTaint_t(memTaint)), old(mem), #nat(index), t);
    same_memTaint64(b, old(mem), mem, old(#memTaint_t(memTaint)), #memTaint_t(memTaint));
}

procedure LoadBe64_buffer(
        out dst:dst_opr64, in src:reg_opr64, inline offset:int, inline t:taint,
        ghost b:buffer64, ghost index:int)
    {:public}
    {:quick exportOnly}
    {:instruction mk_ins(make_instr(I.ins_MovBe64, dst, OMem(tuple(MReg(get_reg(src), offset), t))))}
    reads
        mem; memTaint;
    requires
        movbe_enabled;
        valid_src_addr(mem, b, index);
        valid_taint_buf64(b, mem, memTaint, t);
        src + offset == buffer_addr(b, mem) + 8 * index;
    ensures
        dst == reverse_bytes_nat64(buffer64_read(b, index, mem));
{
}

procedure StoreBe64_buffer(
        in dst:reg_opr64, in src:reg_opr64, inline offset:int, inline t:taint,
        ghost b:buffer64, ghost index:int)
    {:public}
    {:quick exportOnly}
    {:instruction mk_ins(make_instr(I.ins_MovBe64, OMem(tuple(MReg(get_reg(dst), offset), t)), src))}
    reads memTaint;
    modifies
        mem;
    requires
        movbe_enabled;
        valid_dst_addr(mem, b, index);
        valid_taint_buf64(b, mem, memTaint, t);
        dst + offset == buffer_addr(b, mem) + 8 * index;
    ensures
        modifies_mem(loc_buffer(b), old(mem), mem);
        mem == old(buffer64_write(b, index, reverse_bytes_nat64(src), mem));
        valid_taint_buf64(b, mem, memTaint, t);
{
    low_lemma_store_mem64(b, #nat(index), old(reverse_bytes_nat64(src)), old(mem));
    lemma_valid_taint64(b, old(#memTaint_t(memTaint)), old(mem), #nat(index), t);
    same_memTaint64(b, old(mem), mem, old(#memTaint_t(memTaint)), #memTaint_t(memTaint));
}
